dnorm(d$brain, mu, post$sigma[s], log=T)
})
nCases <- nrow(d)
lppd <- sapply(1:nCases, function(i){log_sum_exp(LogL[i,]) - log(nSamples)})
lppd <- sapply(1:nCases, function(i){log_sum_exp(LogL[i,]) - log(nSample)})
pWAIC <- sapply(1:nCases, function(i) var(LogL[i,]))
WAIC <- -2 * (sum(lppd) - sum(pWAIC))
WAIC
LogL <- sapply(1:nSample, function(s){
mu <- post$a[s] +post$b[s]*d$mass.s
dnorm(d$brain, mu, post$sigma[s], log=T)
})
nCases <- nrow(d)
lppd <- sapply(1:nCases, function(i){log_sum_exp(LogL[i,]) - log(nSample)})
pWAIC <- sapply(1:nCases, function(i) var(LogL[i,]))
WAIC <- -2 * (sum(lppd) - sum(pWAIC))
WAIC
waics <- -2 * (lppd - pWAIC)
sqrt(nCases*var(waics))
data(milk)
d <-milk[complete.cases(milk),]
d$neocortex <- d$neocortex.perc / 100
dim8d
dim(d)
a.start <- mean(d$kcak.per.g)
sigma.start <- log(sd(d$kcal.per.g))
m.1 <- map(
alist(
kcal.per.g ~ dnorm(a, exp(log.sigma))
),
data=d, start=list(a=a.start,log.sigma=sigma.start)
)
m.2 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex
),
data=d, start=list(a=a.start,bn=0,log.sigma=sigma.start)
)
m.3 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bm*log(mass)
),
data=d, start=list(a=a.start,bm=0,log.sigma=sigma.start)
)
m.4 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex + bm*log(mass)
),
data=d, start=list(a=a.start,bn=0,bm=0,log.sigma=sigma.start)
)
a.start <- mean(d$kcal.per.g)
sigma.start <- log(sd(d$kcal.per.g))
m.1 <- map(
alist(
kcal.per.g ~ dnorm(a, exp(log.sigma))
),
data=d, start=list(a=a.start,log.sigma=sigma.start)
)
m.2 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex
),
data=d, start=list(a=a.start,bn=0,log.sigma=sigma.start)
)
m.3 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bm*log(mass)
),
data=d, start=list(a=a.start,bm=0,log.sigma=sigma.start)
)
m.4 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex + bm*log(mass)
),
data=d, start=list(a=a.start,bn=0,bm=0,log.sigma=sigma.start)
)
WAIC(m.1)
models <- compare(m.1,m.2,m.3,m.4)
models
models <- compare(m.1,m.2,m.3,m.4)
> models
WAIC pWAIC dWAIC weight   SE  dSE
m.4 -14.6   5.1   0.0   0.91 7.76   NA
m.1  -8.2   1.9   6.4   0.04 4.66 7.39
m.3  -8.2   2.9   6.4   0.04 5.59 5.23
m.2  -6.3   2.9   8.2   0.01 4.28 7.61models <- compare(m.1,m.2,m.3,m.4)
> models
WAIC pWAIC dWAIC weight   SE  dSE
m.4 -14.6   5.1   0.0   0.91 7.76   NA
m.1  -8.2   1.9   6.4   0.04 4.66 7.39
m.3  -8.2   2.9   6.4   0.04 5.59 5.23
m.2  -6.3   2.9   8.2   0.01 4.28 7.61
plot(models)
models
plot(models,SE=T,dSE=T)
coeftab(m.1,m.2,m.3,m.4)
plot(coeftab(m.1,m.2,m.3,m.4))
library(rethinking)
plot(coeftab(m.1,m.2,m.3,m.4))
devtools::install_github("rmcelreath/rethinking")
library(rethinking)
plot(coeftab(m.1,m.2,m.3,m.4))
d <-milk[complete.cases(milk),]
d$neocortex <- d$neocortex.perc / 100
a.start <- mean(d$kcal.per.g)
sigma.start <- log(sd(d$kcal.per.g))
m.1 <- map(
alist(
kcal.per.g ~ dnorm(a, exp(log.sigma))
),
data=d, start=list(a=a.start,log.sigma=sigma.start)
)
m.2 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex
),
data=d, start=list(a=a.start,bn=0,log.sigma=sigma.start)
)
m.3 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bm*log(mass)
),
data=d, start=list(a=a.start,bm=0,log.sigma=sigma.start)
)
m.4 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex + bm*log(mass)
),
data=d, start=list(a=a.start,bn=0,bm=0,log.sigma=sigma.start)
)
coeftab(m.1,m.2,m.3,m.4)
plot(coeftab(m.1,m.2,m.3,m.4))
library(MASS)
plot(coeftab(m.1,m.2,m.3,m.4))
library(rethinking)
library(MASS)
plot(coeftab(m.1,m.2,m.3,m.4))
a.start <- mean(d$kcal.per.g)
sigma.start <- log(sd(d$kcal.per.g))
m.1 <- map(
alist(
kcal.per.g ~ dnorm(a, exp(log.sigma))
),
data=d, start=list(a=a.start,log.sigma=sigma.start)
)
m.2 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex
),
data=d, start=list(a=a.start,bn=0,log.sigma=sigma.start)
)
m.3 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bm*log(mass)
),
data=d, start=list(a=a.start,bm=0,log.sigma=sigma.start)
)
m.4 <- map(
alist(
kcal.per.g ~ dnorm(mu, exp(log.sigma)),
mu <- a + bn*neocortex + bm*log(mass)
),
data=d, start=list(a=a.start,bn=0,bm=0,log.sigma=sigma.start)
)
plot(coeftab(m.1,m.2,m.3,m.4))
coeftab(m.1,m.2,m.3,m.4)
type(coeftab(m.1,m.2,m.3,m.4))
class(coeftab(m.1,m.2,m.3,m.4))
coeftab
coefs <- coeftab(m.1,m.2,m.3,m.4)
plot(coefs)
nc.seq <- seq(0.5,0.8,length.out=30)
d.predict <- list(
kcal.per.g = rep(0,30),
neocortex = nc.seq,
mass = rep(4.5,30)
)
pred.m4 <- link(m.4, data=d.predict)
mu <- apply(pred.m4,2,mean)
mu.PI <- apply(pred.m4,2,PI)
plot(kcal.per.g ~ neocortex,d,col=rangi2)
lines(nc.seq,mu,lty=2)
lines(nc.seq,mu.PI[1,],lty=2)
lines(nc.seq,mu.PI[2,],lty=2)
d.ensemble <- ensemble(m.1,m.2,m.3,m.4,data=d.predict)
mu <- apply(d.ensemble,2,mean)
mu <- apply(d.ensemble$link,2,mean)
mu.PI <- apply(d.ensemble$link,2,PI)
lines(nc.seq,mu)
shade(mu.PI,nc.seq)
mu <- apply(d.ensemble$link,2,mean)
> mu.PI <- apply(d.ensemble$link,2,PI)
> lines(nc.seq,mu)
> shade(mu.PI,nc.seq)mu <- apply(d.ensemble$link,2,mean)
> mu.PI <- apply(d.ensemble$link,2,PI)
> lines(nc.seq,mu)
> shade(mu.PI,nc.seq)
mu <- apply(d.ensemble$link,2,mean)
> mu.PI <- apply(d.ensemble$link,2,PI)
> lines(nc.seq,mu)
> shade(mu.PI,nc.seq)
data(UCBadmit)
UCBadmit
library(rethinking)
data(tulips)
d <- tulips
str(d)
m <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water +bS*shade,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d
)
m <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water + bS*shade,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d
)
m <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water + bS*shade,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000)
)
d$shade.c <- d$shade - mean(d$shade)
d$water.c <- d$water - mean(d$water)
m <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c + bWS*water.c*shade.c,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
bWS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,bWS=0,sigma=sd(d$blooms))
)
coef(m)
m0 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,sigma=sd(d$blooms))
)
m1 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c + bWS*water.c*shade.c,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
bWS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,bWS=0,sigma=sd(d$blooms))
)
coeftab(m0,m1)
m0 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,sigma=sd(d$blooms))
)
m1 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c + bWS*water.c*shade.c,
a ~ dnorm(0,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
bWS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,bWS=0,sigma=sd(d$blooms))
)
coeftab(m0,m1)
m0 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c,
a ~ dnorm(130,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,sigma=sd(d$blooms))
)
m1 <- map(
alist(
blooms ~ dnorm(mu,sigma),
mu <- a + bW*water.c + bS*shade.c + bWS*water.c*shade.c,
a ~ dnorm(130,100),
bW ~ dnorm(0,100),
bS ~ dnorm(0,100),
bWS ~ dnorm(0,100),
sigma ~ dunif(0,100)
), data=d,
method="Nelder-Mead",
control=list(maxit=10000),
start=list(a=mean(d$blooms),bW=0,bS=0,bWS=0,sigma=sd(d$blooms))
)
coeftab(m0,m1)
precis(m1)
library(rethinking)
data(UCBadmit)
d <- UCBadmit
str(d)
d
d$male <- ifelse(d$applicant.gender=="male", 1, 0)
m1 <- map(
alist(
admit ~ dbinom(applications, p),
logit(p) <- a + bM*male,
a ~ dnorm(0,10),
bM ~ dnorm(0,10)
), data = d
)
m2 <- map(
alist(
admit ~ dbinom(applications, p),
logit(p) <- a,
a ~ dnorm(0,10)
), data = d
)
compare(m1,m2)
precis(m1)
exp(0.61)
post <- extract.samples(m1)
p.admit.male <- logistic(post$a + post$bm)
p.admit.female <- logistic(post$a)
diff.admit <- p.admit.male - p.admit.female
quantile(diff.admit)
p.admit.male <- logistic(post$a + post$bM)
p.admit.female <- logistic(post$a)
diff.admit <- p.admit.male - p.admit.female
quantile(diff.admit)
hist(diff.admit)
dens(diff.admit)
postcheck(m1)
for(i in 1:6){
x <- 1 + 2 * (i - 1)
y1 <- d$admit[x]/d$applications[x]
y2 <- d$admit[x+1]/d$applications[x+1]
lines( c(x,x+1), c(y1,y2), col=rangi2, lwd=2)
text(x+0.5,(y1+y2)/2, d$dept[x])
}
d$dept_id <- coerce_index(d$dept)
m3 <- map(
alist(
admit ~ dbinom(applications, p),
logit(p) <- a[dept_id] + bM*male,
a[dept_id] ~ dnorm(0,10),
bM ~ dnorm(0,10)
), data = d
)
m4 <- map(
alist(
admit ~ dbinom(applications, p),
logit(p) <- a[dept_id],
a[dept_id] ~ dnorm(0,10)
), data = d
)
compare(m1,m2,m3,m4)
precis(m3)
precis(m3,depth=2)
exp(-0.1)
m3stan <- map2stan(m3, chains=2, iter=10000, warmup=1000)
precis(m3stan)
m3
m3stan <- map2stan(m3, chains=2, iter=10000, warmup=1000)
d
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
install.packages(c("coda", "mvtnorm", "devtools"))
library(devtools)
library(rethinking)
data(UCBadmit)
d <- UCBadmit
d$male <- ifelse(d$applicant.gender=="male", 1, 0)
d$dept_id <- coerce_index(d$dept)
m3 <- map(
alist(
admit ~ dbinom(applications, p),
logit(p) <- a[dept_id] + bM*male,
a[dept_id] ~ dnorm(0,10),
bM ~ dnorm(0,10)
), data = d
)
m3stan <- map2stan(m3, chains=2, iter=10000, warmup=1000)
install.packages('BH')
m3stan <- map2stan(m3, chains=2, iter=10000, warmup=1000)
library('BH')
library(BH)
m3stan <- map2stan(m3, chains=2, iter=10000, warmup=1000)
seq(1,13)
rep(seq(1,13),4)
cards <- rep(seq(1,13),4)
choice?
;
help(choice)
??choice
??choose
help(choose)
choose(cards,2)
help(sample)
test1 <- sample(cards, 5, replace=F)
test1
nPerson <- 15
nSimulation <- 10000
result <- rep(0, nSimulation)
iteration <- 10000
result <- rep(0, iteration)
test1[test1 < 7]
test1 < 7
len(test1[test1 < 7])
length(test1[test1 < 7])
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
source('~/Desktop/Presentation/RegressionToMean.R', echo=TRUE)
OBP <- mean( c( .352, .348, .332, .324, .325, .288 ) )
source('~/Baseball/PerfectGames.R', echo=TRUE)
source('~/Baseball/PerfectGames.R', echo=TRUE)
source('~/Baseball/PerfectGames.R', echo=TRUE)
source('~/Baseball/PerfectGames.R', echo=TRUE)
source('~/Baseball/PerfectGames.R', echo=TRUE)
source('~/Baseball/PerfectGames.R', echo=TRUE)
1:5
setwd("~/ExcelPeriodicTraining")
